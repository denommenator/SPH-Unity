// Each #kernel tells which function to compile; you can have many kernels
//#pragma kernel Main
#pragma kernel FixedPointIteration
#pragma kernel ComputeDensity
#pragma kernel ComputePressure
#pragma kernel ComputeAcceleration

#pragma kernel ComputeColorFieldGradient
#pragma kernel ComputeColorFieldLaplacian
#pragma kernel CopyBuffers
#pragma kernel ResolveWallCollisions


static float PI = 3.14159265358979323846;

static float3 zero_vec = {0.0f, 0.0f, 0.0f};
static float particleMass = 1000.0f;


RWStructuredBuffer<float3> _Positions, _NextPositions;
RWStructuredBuffer<float3> _Velocities, _NextVelocities;
RWStructuredBuffer<float3> _Accelerations;

RWStructuredBuffer<float3> _ColorFieldGradient;
RWStructuredBuffer<float> _ColorFieldLaplacian;

float _g, _h, _k, _sigma;

float _surfaceTensionThreshold;

RWStructuredBuffer<float3> _FixedPointIterationPositions, _FixedPointIterationVelocities;

RWStructuredBuffer<float3> _CopyBufferOrigin, _CopyBufferDestination;

RWStructuredBuffer<float> _Densities, _Pressures;

struct CollisionContainerWall
{
	float3 inward_normal;
	float3 given_point;
	float elasticity;
};

StructuredBuffer<CollisionContainerWall> _CollisionContainerWalls;

float _Step, _DeltaTime;

int _nCollisionContainerWalls;

uint _nBodies;

uint _nContainerWalls, _CurrentWallID;



//smoothing "kernels"
float W_Gaussian(float3 r_vec, float h)
{
	float r_squared = dot(r_vec, r_vec);
	return 1 / (pow(h , 2) * PI) * exp(- r_squared / pow(h , 2));
}

float3 W_Gaussian_gradient(float3 r_vec, float h)
{
	return -2.0f * W_Gaussian(r_vec, h) * (r_vec) / pow(h , 2);
}

float W_Viscocity_Laplacian(float3 r_vec,float h)
{
	float r = length(r_vec);
	return 45/(PI * pow(h, 6)) * (h-r);
}

float W_poly(float3 r_vec, float h)
{
	float r_squared = dot(r_vec,r_vec);
	float result;
	if(r_squared > pow(h, 2))
	{
		result = 0.0f;
	}
	else
	{
		result = 315/(64*pow(h,9))*pow(pow(h,2)-r_squared, 3);
	}
	return result;

}

float3 W_poly_gradient(float3 r_vec, float h)
{
	float r_squared = dot(r_vec, r_vec);
	float3 result;
	if(r_squared > pow(h, 2) )
	{
		result = zero_vec;
	}
	else
	{
		result = (315*3)/(64*PI*pow(h,9))*pow(pow(h,2)-r_squared,2)*(-2)*r_vec;
	}
	return result;
}


float W_poly_laplacian(float3 r_vec, float h)
{
	float r_squared = dot(r_vec, r_vec);

	float result;
	if(r_squared > pow(h, 2) )
	{
		result = 0.0f;
	}
	else
	{
		result = (-6*315*3)/(64*PI*pow(h,9))*pow(pow(h,2)-r_squared,2) + r_squared*(4*6*315)/(64*PI*pow(h,9))*(pow(h,2)-r_squared);
	}
	return result;
}

float3 W_spiky_gradient(float3 r_vec, float h)
{
	float r = length(r_vec);
	float3 result;
	if( r < 0.000001f )
	{
		result = zero_vec;
	}

	else if(r > h)
	{
		result = zero_vec;
	}
	else
	{
		result = -15/(PI*pow(h,6))*3*pow((h-r),2)*normalize(r_vec);
	}
	return result;
}

float3 pressureForce(uint p_id, float h)
{
	float3 pressureForce_p = {0.0f, 0.0f, 0.0f};
	float3 p = _FixedPointIterationPositions[p_id];
	for(uint q_id = 0; q_id < _nBodies; q_id++)
	{
		float3 q = _FixedPointIterationPositions[q_id];
		pressureForce_p += -particleMass * ((_Pressures[p_id] + _Pressures[q_id]) 
						  / (2 * _Densities[q_id])) * W_spiky_gradient(q - p, h);
	}
	return pressureForce_p;
}

float3 surfaceForce(uint p_id, float sigma)
{
	float3 p = _FixedPointIterationPositions[p_id];
	float3 n = _ColorFieldGradient[p_id];
	return -sigma * step(_surfaceTensionThreshold, length(n)) * _ColorFieldLaplacian[p_id] * normalize(n);
}

float3 viscocityForce(uint p_id, uint q_id)
{

}


float3 getAcceleration(uint p_id, float h, float g, float sigma)
{
	float3 g_down = {0.0f, -g, 0.0f};

	return pressureForce(p_id, h) + surfaceForce(p_id, sigma) + g_down;


}

[numthreads(1,1,1)]
void FixedPointIteration(uint id : SV_DispatchThreadID)
{
	float h = _h;
	float g = _g;
	float sigma = _sigma;
	float dt = _DeltaTime;
	if (id >= _nBodies)
        return;

	_NextPositions[id] = _Positions[id] + dt * _FixedPointIterationVelocities[id];
	_NextVelocities[id] = _Velocities[id] + dt * _Accelerations[id];

	
}

//You could also fill in a matrix first, and sum the columns later...

[numthreads(1,1,1)]
void ComputeDensity(uint p_id : SV_DispatchThreadID)
{
	float h = _h;
	float3 p = _FixedPointIterationPositions[p_id];
	float density_p = 0.0f;

	for(uint q_id = 0; q_id < _nBodies; q_id++)
	{
		float3 q = _FixedPointIterationPositions[q_id];
		density_p += particleMass * W_Gaussian(p-q, h);
	}

	_Densities[p_id] = density_p;
}

[numthreads(1,1,1)]
void ComputePressure(uint p_id : SV_DispatchThreadID)
{
	//speed of sound (?)
	float k = _k;

	//reference density
	float density_neutral = particleMass;

	float density = _Densities[p_id];

	//Cole equation of state for water at sea level

	_Pressures[p_id] = k * (density - density_neutral);


}

[numthreads(1,1,1)]
void ComputeColorFieldGradient(uint p_id : SV_DispatchThreadID)
{
	float h = _h;
	float3 p = _FixedPointIterationPositions[p_id];
	float3 colorFieldGradient_p = {0.0f, 0.0f, 0.0f};

	for(uint q_id = 0; q_id < _nBodies; q_id++)
	{
		float3 q = _FixedPointIterationPositions[q_id];
		colorFieldGradient_p += particleMass /_Densities[q_id] * W_Gaussian_gradient(p - q, h);
	}

	_ColorFieldGradient[p_id] = colorFieldGradient_p;
}

[numthreads(1,1,1)]
void ComputeColorFieldLaplacian(uint p_id : SV_DispatchThreadID)
{
	float h = _h;
	float3 p = _FixedPointIterationPositions[p_id];
	float colorFieldLaplacian_p = 0.0f;

	for(uint q_id = 0; q_id < _nBodies; q_id++)
	{
		float3 q = _FixedPointIterationPositions[q_id];
		colorFieldLaplacian_p += particleMass / _Densities[q_id] * W_poly_laplacian(p - q, h);
	}

	_ColorFieldLaplacian[p_id] = colorFieldLaplacian_p;
}


[numthreads(1,1,1)]
void ComputeAcceleration(uint p_id : SV_DispatchThreadID)
{
	_Accelerations[p_id] = getAcceleration(p_id, _h, _g, _sigma);
}


[numthreads(1,1,1)]
void CopyBuffers(uint p_id : SV_DispatchThreadID)
{
	 _CopyBufferDestination[p_id] = _CopyBufferOrigin[p_id];
}


bool outside_wall(uint p_id, uint wall_id)
{
	float3 p = _NextPositions[p_id];
	CollisionContainerWall wall = _CollisionContainerWalls[wall_id];
	return dot(p - wall.given_point, wall.inward_normal) < 0;
}

bool moving_away(uint p_id, uint wall_id)
{
	float3 p_dot = _NextVelocities[p_id];
	CollisionContainerWall wall = _CollisionContainerWalls[wall_id];
	return dot(p_dot, wall.inward_normal) < 0;
}

float3 reset_position(uint p_id, uint wall_id)
{
	float3 p = _NextPositions[p_id];
	CollisionContainerWall wall = _CollisionContainerWalls[wall_id];

	float p_dot_n = dot(p - wall.given_point, wall.inward_normal);
	return p - 2 * p_dot_n * wall.inward_normal;
	
}

float3 reflect_velocity(uint p_id, uint wall_id)
{
	float3 p_dot = _NextVelocities[p_id];
	CollisionContainerWall wall = _CollisionContainerWalls[wall_id];

	float p_dot_n = dot(p_dot, wall.inward_normal);
	return p_dot - (1 + wall.elasticity) * p_dot_n * wall.inward_normal;
	
}

[numthreads(1,1,1)]
void ResolveWallCollisions(uint p_id : SV_DispatchThreadID)
{
	if(outside_wall(p_id, _CurrentWallID))
	{
		_NextPositions[p_id] = reset_position(p_id, _CurrentWallID);

		if(moving_away(p_id, _CurrentWallID))
		{
			_NextVelocities[p_id] = reflect_velocity(p_id, _CurrentWallID);
        }
	}
}

