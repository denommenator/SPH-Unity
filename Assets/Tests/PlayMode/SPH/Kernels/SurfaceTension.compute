//likely needs to be half, since we are storing two groupshared buffers!

#define group_dim_pow_2 512

#pragma kernel ComputeSurfaceForce


#include "Constants.cginc"
#include "SmoothingKernels.cginc"


StructuredBuffer<float3> _Positions;
StructuredBuffer<float> _Densities;

//color field gradient and laplacian values never make it to global memory.
//We should probably put them there for visualizing later...
//RWStructuredBuffer<float3> _ColorFieldGradient;
//RWStructuredBuffer<float3> _ColorFieldLaplacian;
RWStructuredBuffer<float3> _SurfaceForces;


float _hSurfaceTension;
float _sigma;
float _surfaceTensionThreshold;

uint _nBodies;


uint3 grid_dim;
uint3 group_dim;

//color field gradient and laplacian temporary values
groupshared float3 gradient_thread_id_orbits[group_dim_pow_2];
groupshared float laplacian_thread_id_orbits[group_dim_pow_2];

//we don't actually need a temporary for surface forces.
//groupshared float3 force_thread_id_orbits[group_dim_pow_2];

[numthreads(group_dim_pow_2, 1, 1)]
void ComputeSurfaceForce(uint group_thread_id : SV_GroupThreadID, uint group_id : SV_GroupID)
{
	//grid_dim-stride loop over the particles p_id to compute each particle density.
	//i.e. each block will computes the density at only 1 particle if we have enough blocks. 
	// Since we might run out
	//of blocks due to the maximum # of blocks being less than 1m, we recycle the blocks
	//and stride over the #grid_dim.
	for (uint p_id = group_id;
		p_id < _nBodies;
		p_id += grid_dim.x)
	{
		float h = _hSurfaceTension;
		float3 p = _Positions[p_id];

		float3 gradient_thread_id_orbit = zero_vec;
		float laplacian_thread_id_orbit = 0.0f;


		//flatten the contributions from neighbor particles, q_id
		//to an array of size equal to the number of threads per block
		//which is required to be a power of 2.
		//This is a block-stride loop, indexed by group_thread_id's and
		//containing the +group_dim-orbits of the density contributions of q_ids
		for (uint q_id = group_thread_id; 
			q_id < _nBodies; 
			q_id += group_dim.x)
		{
			float3 q = _Positions[q_id];
			gradient_thread_id_orbit += particleMass /_Densities[q_id] * W_poly_gradient(p - q, _hSurfaceTension);
			laplacian_thread_id_orbit += particleMass /_Densities[q_id] * W_poly_laplacian(p - q, _hSurfaceTension);
		}

		gradient_thread_id_orbits[group_thread_id.x] = gradient_thread_id_orbit;
		laplacian_thread_id_orbits[group_thread_id.x] = laplacian_thread_id_orbit;

		//I was warned by MS HLSL docs not to use this due to portability...
		GroupMemoryBarrierWithGroupSync();

		//now cooperatively sum the partial sums from the previous loop,
		// each thread adds two members together, leaving only half the values each iteration.
		//This requires the number of groupThreads to be a power of 2.
		//The total sum remains in density_thread_id_orbits[0]

		uint i = group_dim.x / 2;
		while (i != 0)
		{
			if (group_thread_id.x < i)
			{
				gradient_thread_id_orbits[group_thread_id.x] += gradient_thread_id_orbits[group_thread_id.x + i];
				laplacian_thread_id_orbits[group_thread_id.x] += laplacian_thread_id_orbits[group_thread_id.x + i];

			}
			GroupMemoryBarrierWithGroupSync();
			i /= 2;
		}
		float color_field_laplacian_p = laplacian_thread_id_orbits[0];
		float3 color_field_gradient_p = gradient_thread_id_orbits[0];
		float threshold_switch = step(_surfaceTensionThreshold, length(color_field_gradient_p));
		_SurfaceForces[p_id] = -_sigma * threshold_switch * color_field_laplacian_p * normalize(color_field_gradient_p);
	}
}
