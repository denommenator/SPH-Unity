#define group_dim_pow_2 512


// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel ComputePressureForces


#include "Constants.cginc"
#include "SmoothingKernels.cginc"


StructuredBuffer<float3> _Positions;
StructuredBuffer<float> _Densities;
StructuredBuffer<float> _Pressures;

RWStructuredBuffer<float3> _PressureForces;

float _hDensity;
uint _nBodies;


uint3 grid_dim;
uint3 group_dim;

groupshared float3 pressure_force_thread_id_orbits[group_dim_pow_2];


float3 pressureForce(uint p_id, uint q_id, float hDensity)
{
	float3 p = _Positions[p_id];
	float3 q = _Positions[q_id];
	return - particleMass * (_Pressures[p_id] + _Pressures[q_id]) / (2 * _Densities[q_id]) * W_spiky_gradient(p - q, hDensity);
}

[numthreads(group_dim_pow_2, 1, 1)]
void ComputePressureForces(uint group_thread_id : SV_GroupThreadID, uint group_id : SV_GroupID)
{
	//grid_dim-stride loop over the particles p_id to compute each particle pressure force.
	//i.e. each block will computes the pressure force at only 1 particle if we have enough blocks. 
	// Since we might run out
	//of blocks due to the maximum # of blocks being less than 1m, we recycle the blocks
	//and stride over the #grid_dim.
	for (uint p_id = group_id;
		p_id < _nBodies;
		p_id += grid_dim.x)
	{
		float h = _hDensity;
		float3 p = _Positions[p_id];

		float3 pressure_force_thread_id_orbit = zero_vec;

		//flatten the contributions from neighbor particles, q_id
		//to an array of size equal to the number of threads per block
		//which is required to be a power of 2.
		//This is a block-stride loop, indexed by group_thread_id's and
		//containing the +group_dim-orbits of the density contributions of q_ids
		for (uint q_id = group_thread_id; 
			q_id < _nBodies; 
			q_id += group_dim.x)
		{
			float3 q = _Positions[q_id];
			pressure_force_thread_id_orbit += pressureForce(p_id, q_id, _hDensity);
		}

		pressure_force_thread_id_orbits[group_thread_id.x] = pressure_force_thread_id_orbit;

		//I was warned by MS HLSL docs not to use this due to portability...
		GroupMemoryBarrierWithGroupSync();

		//now cooperatively sum the partial sums from the previous loop,
		// each thread adds two members together, leaving only half the values each iteration.
		//This requires the number of groupThreads to be a power of 2.
		//The total sum remains in density_thread_id_orbits[0]

		uint i = group_dim.x / 2;
		while (i != 0)
		{
			if (group_thread_id.x < i)
			{
				pressure_force_thread_id_orbits[group_thread_id.x] += pressure_force_thread_id_orbits[group_thread_id.x + i];
			}
			GroupMemoryBarrierWithGroupSync();
			i /= 2;
		}

		_PressureForces[p_id] = pressure_force_thread_id_orbits[0];
	}
}
